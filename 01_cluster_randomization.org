#+TITLE: 01_cluster_randomization.org
#+PROPERTY: header-args:R :noweb yes

* Batch scripts

Two bash shell scripts which will run all of the analyses in batch from *-nix command line

** by subject

#+BEGIN_SRC sh :shebang "#!/bin/bash -eu" :tangle scripts/01_CR_batch_subj.sh
  # first arg: number of permutation runs; second is n bootstrap runs
  # e.g., to execute from the command line: 
  # scripts/DP_CR_analysis_overall_by_subj.sh 1000 1000

  R_EXEC="R --no-save --no-restore"

  # by subject
  $R_EXEC --args $1 $2 < scripts/01_CR_subj_group.R
  $R_EXEC --args $1 $2 < scripts/01_CR_subj_competition.R

  $R_EXEC --args $1 $2 < scripts/01_CR_subj_consolidation.R
  $R_EXEC --args $1 $2 < scripts/01_CR_consolidation_collapsed.R
#+END_SRC

** by item

#+BEGIN_SRC sh :shebang "#!/bin/bash -eu" :tangle scripts/01_CR_batch_item.sh
  # first arg: number of permutation runs; second is n bootstrap runs
  # e.g., to execute from the command line: 
  # scripts/DP_CR_analysis_overall_by_item.sh 1000 1000

  R_EXEC="R --no-save --no-restore"

  # by subject
  $R_EXEC --args $1 $2 < scripts/01_CR_item_comptype.R
  $R_EXEC --args $1 $2 < scripts/01_CR_item_competition.R

  $R_EXEC --args $1 $2 < scripts/01_CR_item_consolidation.R
#+END_SRC


* Main analysis
** Cluster setup for parallel processing

 #+NAME: our_cluster
 #+BEGIN_SRC R :tangle scripts/cluster_setup.R
   library("parallel")

   ## start the computing cluster
   ## If you want to make a fancier cluster to speed up the analysis, change the call to =makeCluster()= below.
   ## for example, this was the setting for my lab to use multiple cores on multiple machines:
   ## cl <- makeCluster(rep(c("localhost", "gossip", "yap", "chatter"),
   ##                      c(6, 6, 8, 8)))
   cl <- makeCluster(detectCores())
 #+END_SRC

 #+NAME: start_cluster
 #+BEGIN_SRC R 
   source("scripts/cluster_setup.R")  # defines 'cl', cores for parallel computing
 #+END_SRC

 #+NAME: stop_cluster
 #+BEGIN_SRC R
   stopCluster(cl)
 #+END_SRC

** Libraries

 #+NAME: libs
 #+BEGIN_SRC R
   library("dplyr")
   library("tidyr")
 #+END_SRC

** General functions

*** Functions for aggregating and bootstrapping

 #+NAME: overall_fns
 #+BEGIN_SRC R
   fit_mnom <- function(x, form = cbind(C, NC) ~ G * CT * CM) {
       junk <- capture.output(
           mod <- nnet::multinom(form, x)
           )
       v <- as.vector(coef(mod), "numeric")
       names(v) <- colnames(coef(mod))
       v
   }

   permute_unit <- function(x, unit_codes, vname_short) {
       all_but_var <- x[setdiff(tbl_vars(x), vname_short)]
       join_fields <- intersect(tbl_vars(all_but_var),
																tbl_vars(unit_codes))
       unit_codes[[vname_short]] <- sample(unit_codes[[vname_short]])
       unit_codes %>%
           inner_join(all_but_var, join_fields)
   }

   ## ulevels are the unit levels
   sync_perm <- function(x, cond_codes, var, ulevels) {
       all_units <- do.call("select_", c(list(x), as.list(ulevels))) %>%
           distinct()

       dat_split <- split(all_units,
													lapply(ulevels[-1], function(vx) all_units[[vx]]))

       n_per <- dat_split %>% lapply(nrow) %>% unlist()

       min_unit <- n_per[which(n_per == min(n_per))[1]]

       svec1 <- sample(c(-1, 1), min_unit, TRUE)

       all_units[["svec"]] <-
           sapply(seq_along(n_per), function(ix) {
											sample(c(rep(1, n_per[ix] - min_unit), svec1))
									}) %>% unlist()

       all_var <- inner_join(cond_codes, all_units, ulevels)


       all_var[[var]] <- all_var[[var]] * all_var[["svec"]]

       all_but_var <- x[setdiff(tbl_vars(x), var)]
       join_fields <- intersect(tbl_vars(all_var), tbl_vars(all_but_var))

       all_var %>%
           inner_join(all_but_var, join_fields)
   }
 #+END_SRC

 #+NAME: agg_fns
 #+BEGIN_SRC R
   bin_up <- function(x, tdat2, unit = "Subject") {
       agg <- x %>%
           inner_join(tdat2, "TrialID") %>%
           group_by_(unit, quote(Group), quote(CompType),
                     quote(Cond), quote(FID), quote(ID)) %>%
           summarize(Y = n()) %>%
           ungroup()

       agg_n <- agg %>%
           group_by_(unit, quote(Group), quote(CompType),
                     quote(Cond), quote(FID)) %>%
           summarize(N = sum(Y)) %>%
           ungroup() %>%
           inner_join(agg,
											c(unit, "Group", "CompType", "Cond", "FID"))

       all_frames <- agg_n %>%
           select_(unit, quote(Group), quote(CompType), quote(Cond), quote(FID)) %>%
           distinct() %>%
           merge(agg_n %>% select(ID) %>% distinct())

       all_frames %>%
           left_join(agg_n,
                     c(unit, "Group", "CompType", "Cond", "FID", "ID")) %>%
           as_data_frame() %>%
           mutate(Y = ifelse(is.na(Y), 0, Y),
									N = ifelse(is.na(N), 0, N),
									CompType = factor(CompType),
									Cond = factor(Cond))    
   }

   agg_over_units <- function(x, full = FALSE) {
       ff <- x %>%
           group_by(Group, CompType, Cond, FID, ID) %>%
           summarize(Y = sum(Y, na.rm = TRUE), N = sum(N, na.rm = TRUE)) %>%
           ungroup() %>%
           mutate(p = Y / N)
       if (full) ff else ff %>% `[[`("p")
   }

   boot_by_unit <- function(x, unit = "Subject") {
       ff <- split(x, f = x[[unit]])
       sample(ff, length(ff), replace = TRUE) %>% bind_rows()
   }


   agg_up2 <- function(x, full = FALSE) {
       ff <- x %>%
           group_by(Group, CompType, Cond, FID) %>%
           summarize(C = sum(C), N = sum(NC)) %>%
           ungroup() %>%
           mutate(p = C / (C + N))
       if (full) ff else ff %>% `[[`("p")
   }

   add_y <- function(rx, dat) {
       cat(unlist(rx), "\n")
       data_frame(y = dat %>%
											filter(Group2 == rx[["Group2"]],
                             CompType == rx[["CompType"]],
                             between(ms, rx[["xmin"]], rx[["xmax"]])) %>%
                                 `[[`("UL") %>% max())
   }
 #+END_SRC

*** Functions for cluster randomization

 #+NAME: clust_fns2
 #+BEGIN_SRC R
   bin_comp <- function(x, tdat2, unit) {
       ff <- x %>% inner_join(tdat2, "TrialID") %>%
           mutate(Comp = ifelse(ID == "Comp", "C", "NC")) %>%
           group_by_(unit, quote(Group), quote(CompType), quote(Cond),
                     quote(FID), quote(Comp)) %>%
           summarize(Y = n()) %>% ungroup()

       all_comp <- ff %>% select(Comp) %>% distinct()

       all_fr <- ff %>% select_(unit, quote(Group), quote(CompType),
																quote(Cond), quote(FID)) %>% distinct() %>%
																		merge(all_comp) %>% as_data_frame()

       join_fr <- intersect(tbl_vars(ff), tbl_vars(all_fr))
       all_fr %>%
           left_join(ff, join_fr) %>%
           mutate(Y = ifelse(is.na(Y), 0, Y)) %>%
           spread(Comp, Y)
   }

   sync_boot <- function(x, unit, iv) {
       udat <- x %>% select_(iv, unit) %>% distinct()
       dat_split <- split(udat, udat[iv])
       n_per <- dat_split %>% lapply(nrow) %>% unlist()
       min_n <- n_per[which(n_per == min(n_per))[1]]

       boot_ix <- sample(seq_len(min_n), min_n, TRUE)
       boot_n <- table(boot_ix) %>% as.integer()

       bdat <- lapply(dat_split, function(dx) {
									extra <- sample(seq_len(nrow(dx)), nrow(dx) - sum(boot_n),
																	replace = FALSE)
									slix <- c(extra, rep(sample(setdiff(seq_len(nrow(dx)), extra),
                             length(boot_n), FALSE), boot_n))
									slice(dx, slix)
							}) %>% bind_rows()

       bdat %>%
           inner_join(x, c(unit, iv))
   }

   get_boot_pvals <- function(x, eff_keep, unit, iv, nmc = 1000,
															mod_form = cbind(C, NC) ~ G * CT * CM) {
       orig <- daply(x, .(FID), fit_mnom,
                     form = mod_form)[, eff_keep, drop = FALSE]

       ax <- replicate(nmc, x %>%
                           sync_boot(unit, iv) %>%
                           daply(.(FID), fit_mnom, form = mod_form))

       boot_sd <- apply(ax[, eff_keep, , drop = FALSE], c(1, 2), sd)

       t_val <- abs(orig / boot_sd)
       2 * (1 - pnorm(t_val)) * sign(orig)
   }

   get_boot_pvals_ws <- function(x, eff_keep, unit, nmc = 1000,
															mod_form = cbind(C, NC) ~ G * CT * CM) {
       orig <- daply(x, .(FID), fit_mnom,
                     form = mod_form)[, eff_keep, drop = FALSE]

       ax <- replicate(nmc,
                       x %>%
                           boot_by_unit(unit) %>%
                           daply(.(FID), fit_mnom, form = mod_form)
                       )

       boot_sd <- apply(ax[, eff_keep, , drop = FALSE], c(1, 2), sd)

       t_val <- abs(orig / boot_sd)
       2 * (1 - pnorm(t_val)) * sign(orig)
   }

   get_clusters <- function(x, max_cms_only = FALSE) {
       tvec <- (abs(x) < .05) * sign(x)
       tvec_rle <- rle(tvec)
       run_sig <- tvec_rle$values != 0
       res <- data_frame()
       if (sum(run_sig) == 0) {
           if (max_cms_only) {res <- 0} else {}
       } else {
           t0 <- sapply(which(run_sig), function(cx) {
														sum(tvec_rle$lengths[seq_len(cx - 1)]) + 1
												})
           t1 <- mapply(function(ix, iy) {tvec_rle$lengths[ix] + iy - 1},
												which(run_sig), t0, SIMPLIFY = FALSE) %>% unlist()
           cms <- mapply(function(ix, iy) {
                             sum(-2 * log(abs(x[ix:iy])))
                         }, t0, t1)
           names(t0) <- NULL
           clust <- data_frame(run_id = seq_len(sum(run_sig)),
                               t0 = names(x)[t0],
                               t1 = names(x)[t1],
                               cms = cms)
           res <- if (max_cms_only) max(cms) else clust
       }
       return(res)
   }

   get_p_value <- function(rx, pmx) {
       eff <- as.character(rx[["Effect"]][1])
       sapply(rx[["cms"]],
							function(x) sum(c(x, pmx[, eff]) >= x)) / (length(pmx[, eff]) + 1)
   }

   cluster_pvalues <- function(orig, pvals, pmx_1, pmx_2,
                               efflist = c("G", "CM", "CT:CM", "G:CT",
                                   "G:CM", "G:CT:CM")) {
       calc_mean_paramest <- function(x, ori) {
           from_pm <- which(rownames(ori) == x[["t0"]])
           to_pm <- which(rownames(ori) == x[["t1"]])
           data_frame(mpe = mean(ori[, x[["Effect"]]][from_pm:to_pm]))
       }
       ori <- readRDS(orig)
       pval <- readRDS(pvals)
       pmx1 <- readRDS(pmx_1)

       pmx_full <- pmx1
       if (!is.null(pmx_2)) {
           pmx2 <- readRDS(pmx_2)
           pmx_full <- cbind(pmx1, pmx2)
       } else {}
       cols_keep <- intersect(intersect(colnames(ori), colnames(pval)), colnames(pmx_full))

       clust <- adply(pval[, cols_keep, drop = FALSE], 2, get_clusters) %>%
           rename(Effect = X1) %>% mutate(Effect = as.character(Effect))
       clust2 <- clust %>%
           group_by(Effect, run_id) %>% do(calc_mean_paramest(., ori)) %>%
           inner_join(clust, c("Effect", "run_id"))

       clust2 %>%
           filter(Effect %in% efflist) %>%
           group_by(Effect, run_id) %>%
           do(pval = get_p_value(., pmx_full)) %>% unnest() %>%
           inner_join(clust2)
   }

 #+END_SRC


** Align the data

 #+NAME: get_dp_aligned
 #+BEGIN_SRC R
   ## add 200 ms to account for EM delay (for adults)
   tdat2 <- readRDS("derived/trial_data.rds") %>%
       as_data_frame() %>%
       mutate(frEnd = round(60 * ((DPlag + 200) / 1000)))

   edat_ctt <- readRDS("derived/eye_data_cumulative.rds") %>%
       as_data_frame()

   dp_frames <- edat_ctt %>%
       inner_join(tdat2, "TrialID") %>%
       rename(orig_FID = FID) %>%
       mutate(FID = orig_FID - frEnd) %>%
       filter(FID >= -31, FID <= 91) %>%
       select(TrialID, FID, orig_FID, ID, Pad)

   dp_subj <- dp_frames %>%
       inner_join(tdat2, "TrialID") %>%
       mutate(Comp = ifelse(ID == "Comp", "C", "NC"),
							bin = floor((FID + 1) / 3) * 3) %>%
       count(Subject, Group, CompType, Cond, FID = bin, Comp) %>%
       ungroup() %>%
       spread(Comp, n) %>%
       mutate(C = ifelse(is.na(C), 0, C),
							NC = ifelse(is.na(NC), 0, NC),
							G = ifelse(Group == "adult", .5, -.5),
							CT = ifelse(CompType == "New", .5, -.5),
							CM = ifelse(Cond %in% c("CompPresent", "Consolidated",
									"Unconsolidated"), .5, -.5))

   dp_item <- dp_frames %>%
       inner_join(tdat2, "TrialID") %>%
       mutate(Comp = ifelse(ID == "Comp", "C", "NC"),
							bin = floor((FID + 1) / 3) * 3) %>%
       count(Item = Sound, Group, CompType, Cond, FID = bin, Comp) %>%
       ungroup() %>%
       spread(Comp, n) %>%
       mutate(C = ifelse(is.na(C), 0, C),
							NC = ifelse(is.na(NC), 0, NC),
							G = ifelse(Group == "adult", .5, -.5),
							CT = (CompType != "New") - mean(CompType == "New"), # bc unbalanced
							CM = ifelse(Cond %in% c("CompPresent", "Consolidated",
									"Unconsolidated"), .5, -.5))

   cond_lookup <- dp_subj %>% distinct(Cond) %>%
       mutate(Cond = factor(Cond),
							Condition = c("Control", "Competitor", 
									"Trained on Day 1", "Trained on Day 2", "Untrained"))

   group_lookup <- data_frame(Group = factor(c("adult", "child")),
															Group2 = factor(c("Adults", "Children")))
 #+END_SRC


** Overall analysis

*** Treating subjects as random factors

**** by group

 #+BEGIN_SRC R :tangle scripts/01_CR_subj_group.R
   library("plyr")
   <<libs>>

   <<agg_fns>>

   <<overall_fns>>

   <<clust_fns2>>

   <<get_dp_aligned>>

   nperm_runs <- as.integer(commandArgs(TRUE)[1])
   nmc <- as.integer(commandArgs(TRUE)[2])

   stopifnot(!is.na(nperm_runs) && !is.na(nmc))

   subj_codes <- dp_subj %>%
       select(Subject, Group, G) %>% distinct()

   eff_keep <- c("G", "CT", "CM", "G:CT", "G:CM", "CT:CM", "G:CT:CM")

   orig_coef <- daply(dp_subj, .(FID), fit_mnom)
   orig_pvals <- get_boot_pvals(dp_subj, eff_keep, "Subject", "Group", nmc)
   saveRDS(orig_coef, file = "derived/results/DP_overall_CR_analysis_orig_by_subj.rds")
   saveRDS(orig_pvals, file = "derived/results/DP_overall_CR_analysis_orig_pvals_by_subj.rds")

   group_eff <- c("G", "G:CT", "G:CM", "G:CT:CM")

   <<start_cluster>>

   clusterCall(cl, function(x) {library("plyr"); library("dplyr")}) %>%
     invisible()
   clusterExport(cl, setdiff(ls(), "cl"))
   cms_list <- parLapply(cl, seq_len(nperm_runs), function(ix) {
                 permute_unit(dp_subj, subj_codes, "G") %>%
                     get_boot_pvals(group_eff, "Subject", "Group", nmc) %>%
                     aaply(2, get_clusters, max_cms_only = TRUE)
             })
   cms_px <- do.call("rbind", cms_list)

   <<stop_cluster>>

   saveRDS(cms_px, file = "derived/results/DP_overall_CR_analysis_group_by_subj.rds")
 #+END_SRC

**** by competition

 #+BEGIN_SRC R :tangle scripts/01_CR_subj_competition.R
   library("plyr")
   <<libs>>

   <<agg_fns>>

   <<overall_fns>>

   <<clust_fns2>>

   <<get_dp_aligned>>

   nperm_runs <- as.integer(commandArgs(TRUE)[1])
   nmc <- as.integer(commandArgs(TRUE)[2])

   stopifnot(!is.na(nperm_runs) && !is.na(nmc))

   cm_codes <- dp_subj %>%
       select(Subject, Group, Cond, CM) %>% distinct()

   cm_eff <- c("CM", "CT:CM")

   <<start_cluster>>

   clusterCall(cl, function(x) {library("plyr"); library("dplyr")}) %>%
     invisible()
   clusterExport(cl, setdiff(ls(), "cl"))
   cms_list <- parLapply(cl, seq_len(nperm_runs), function(ix) {
       sync_perm(dp_subj, cm_codes, "CM", c("Subject", "Group")) %>%
           get_boot_pvals(cm_eff, "Subject", "Group", nmc) %>%
           aaply(2, get_clusters, max_cms_only = TRUE)
   })
   cms_px <- do.call("rbind", cms_list)

   <<stop_cluster>>

   saveRDS(cms_px, file = "derived/results/DP_overall_CR_analysis_competition_by_subj.rds")
 #+END_SRC


*** Treating items as random factors

**** by comptype

 #+BEGIN_SRC R :tangle scripts/01_CR_item_comptype.R
   library("plyr")
   <<libs>>

   <<agg_fns>>

   <<overall_fns>>

   <<clust_fns2>>

   <<get_dp_aligned>>

   nperm_runs <- as.integer(commandArgs(TRUE)[1])
   nmc <- as.integer(commandArgs(TRUE)[2])

   stopifnot(!is.na(nperm_runs) && !is.na(nmc))

   item_codes <- dp_item %>%
       select(Item, CompType, CT) %>% distinct()

   eff_keep <- c("G", "CT", "CM", "G:CT", "G:CM", "CT:CM", "G:CT:CM")

   orig_coef <- daply(dp_item, .(FID), fit_mnom)
   orig_pvals <- get_boot_pvals(dp_item, eff_keep, "Item", "CompType", nmc)
   saveRDS(orig_coef, file = "derived/results/DP_overall_CR_analysis_orig_by_item.rds")
   saveRDS(orig_pvals, file = "derived/results/DP_overall_CR_analysis_orig_pvals_by_item.rds")

   ct_eff <- c("CT", "G:CT", "CT:CM", "G:CT:CM")

   <<start_cluster>>

   clusterCall(cl, function(x) {library("plyr"); library("dplyr")}) %>%
     invisible()
   clusterExport(cl, setdiff(ls(), "cl"))
   cts_list <- parLapply(cl, seq_len(nperm_runs), function(ix) {
                 permute_unit(dp_item, item_codes, "CT") %>%
                     get_boot_pvals(ct_eff, "Item", "CompType", nmc) %>%
                     aaply(2, get_clusters, max_cms_only = TRUE)
             })
   cts_px <- do.call("rbind", cts_list)

   <<stop_cluster>>

   saveRDS(cts_px, file = "derived/results/DP_overall_CR_analysis_comptype_by_item.rds")
 #+END_SRC

**** by competition

 #+BEGIN_SRC R :tangle scripts/01_CR_item_competition.R
   library("plyr")
   <<libs>>

   <<agg_fns>>

   <<overall_fns>>

   <<clust_fns2>>

   <<get_dp_aligned>>

   nperm_runs <- as.integer(commandArgs(TRUE)[1])
   nmc <- as.integer(commandArgs(TRUE)[2])

   stopifnot(!is.na(nperm_runs) && !is.na(nmc))

   ## effects of competition (CM) synchronized over CompType (CT)
   cm_codes <- dp_item %>%
       select(Item, CompType, CM) %>% distinct()

   cm_eff <- c("CM", "G:CM", "CT:CM", "G:CT:CM")

   <<start_cluster>>

   clusterCall(cl, function(x) {library("plyr"); library("dplyr")}) %>%
   invisible()
   clusterExport(cl, setdiff(ls(), "cl"))
   cms_list <- parLapply(cl, seq_len(nperm_runs), function(ix) {
       sync_perm(dp_item, cm_codes, "CM", c("Item", "CompType")) %>%
           get_boot_pvals(cm_eff, "Item", "CompType", nmc) %>%
           aaply(2, get_clusters, max_cms_only = TRUE)
   })
   cms_px <- do.call("rbind", cms_list)

   <<stop_cluster>>

   saveRDS(cms_px, file = "derived/results/DP_overall_CR_analysis_competition_by_item.rds")
 #+END_SRC

** Consolidation analysis

*** by subject

 #+BEGIN_SRC R :tangle scripts/01_CR_subj_consolidation.R
   library("plyr")
   <<libs>>

   <<agg_fns>>

   <<overall_fns>>

   <<clust_fns2>>

   <<get_dp_aligned>>

   nperm_runs <- as.integer(commandArgs(TRUE)[1])
   nmc <- as.integer(commandArgs(TRUE)[2])

   stopifnot(!is.na(nperm_runs) && !is.na(nmc))

   dp_cons <- dp_subj %>%
       filter(CompType != "Existing", Cond != "Untrained") %>%
       mutate(G = ifelse(Group == "adult", .5, -.5),
							CS = ifelse(Cond == "Consolidated", .5, -.5)) %>%
									select(-CT, -CM)

   cs_codes <- dp_cons %>%
       select(Subject, Group, Cond, CS) %>% distinct()

   mod_form <- cbind(C, NC) ~ G * CS

   cs_eff <- c("CS", "G:CS")

   orig_coef <- daply(dp_cons, .(FID), fit_mnom, form = mod_form)
   orig_pvals <- get_boot_pvals(dp_cons, cs_eff, "Subject", "Group", nmc,
																mod_form)
   saveRDS(orig_coef, file = "derived/results/DP_consolidation_CR_analysis_orig_by_subj.rds")
   saveRDS(orig_pvals,
           file = "derived/results/DP_consolidation_CR_analysis_orig_pvals_by_subj.rds")

   <<start_cluster>>

   clusterCall(cl, function(x) {library("plyr"); library("dplyr")}) %>%
     invisible()
   clusterExport(cl, setdiff(ls(), "cl"))

   cms_list <- parLapply(cl, seq_len(nperm_runs), function(ix) {
       sync_perm(dp_cons, cs_codes, "CS", c("Subject", "Group")) %>%
           get_boot_pvals(cs_eff, "Subject", "Group", nmc,
													mod_form) %>%
           aaply(2, get_clusters, max_cms_only = TRUE)
   })

   cms_px <- do.call("rbind", cms_list)

   <<stop_cluster>>

   saveRDS(cms_px, file = "derived/results/DP_consolidation_CR_analysis_by_subj.rds")
 #+END_SRC

*** by item

 #+BEGIN_SRC R :tangle scripts/01_CR_item_consolidation.R
   library("plyr")
   <<libs>>

   <<agg_fns>>

   <<overall_fns>>

   <<clust_fns2>>

   <<get_dp_aligned>>

   nperm_runs <- as.integer(commandArgs(TRUE)[1])
   nmc <- as.integer(commandArgs(TRUE)[2])

   stopifnot(!is.na(nperm_runs) && !is.na(nmc))

   ## effects of consolidation (consolidated vs unconsolidated), CS
   dp_cons <- dp_item %>% 
       filter(CompType != "Existing", Cond != "Untrained") %>%
       mutate(G = ifelse(Group == "adult", .5, -.5),
							CS = ifelse(Cond == "Consolidated", .5, -.5)) %>%
									select(-CT, -CM)

   cs_codes <- dp_cons %>%
       select(Item, Cond, CS) %>% distinct()

   mod_form <- cbind(C, NC) ~ G * CS

   orig_coef <- daply(dp_cons, .(FID), fit_mnom,
											form = mod_form)

   cs_eff <- c("CS", "G:CS")

   orig_pvals <- get_boot_pvals_ws(dp_cons, cs_eff, "Item", nmc, mod_form)
   saveRDS(orig_coef, "derived/results/DP_consolidation_CR_analysis_orig_by_item.rds")
   saveRDS(orig_pvals, "derived/results/DP_consolidation_CR_analysis_orig_pvals_by_item.rds")

   <<start_cluster>>

   clusterCall(cl, function(x) {library("plyr"); library("dplyr")}) %>%
     invisible()
   clusterExport(cl, setdiff(ls(), "cl"))

   cms_list <- parLapply(cl, seq_len(nperm_runs), function(ix) {
       permute_unit(dp_cons, cs_codes, "CS") %>%
       get_boot_pvals_ws(cs_eff, "Item", nmc, mod_form) %>%
           aaply(2, get_clusters, max_cms_only = TRUE)
   })

   cms_px <- do.call("rbind", cms_list)

   <<stop_cluster>>

   saveRDS(cms_px, file = "derived/results/DP_consolidation_CR_analysis_by_item.rds")
 #+END_SRC

** Consolidation analysis with time factor collapsed

 #+HEADER: :results value :colnames yes
 #+BEGIN_SRC R :tangle scripts/01_CR_consolidation_collapsed.R :exports results
   library("plyr")
   <<libs>>

   <<agg_fns>>

   <<overall_fns>>

   <<clust_fns2>>

   permute_wunit <- function(x, unit, var) {
       dat <- x %>% select_(unit) %>% distinct()
       dat[["svec"]] <- sample(c(-1, 1), nrow(dat), TRUE)
       dat2 <- dat %>%
           inner_join(x, unit)
       dat2[[var]] <- dat2[[var]] * dat2[["svec"]]
       dat2 %>% select(-svec)
   }

   perm_ps <- function(x) {sum(abs(x) >= abs(x[1]))}

   <<get_dp_aligned>>

   ## nperm_runs <- as.integer(commandArgs(TRUE)[1])
   ## stopifnot(!is.na(nperm_runs))

   nperm_runs <- 1000

   dp_subj2 <- dp_subj %>%
       filter(CompType != "Existing", Cond != "Untrained") %>%
       mutate(G = ifelse(Group == "adult", .5, -.5),
							CS = ifelse(Cond == "Consolidated", .5, -.5)) %>%
									select(-CT, -CM) %>%
       group_by(Subject, Group, Cond, G, CS) %>%
       summarize(C = sum(C), NC = sum(NC)) %>%
       ungroup()

   dp_item2 <- dp_item %>%
       filter(CompType != "Existing", Cond != "Untrained") %>%
       mutate(G = ifelse(Group == "adult", .5, -.5),
							CS = ifelse(Cond == "Consolidated", .5, -.5)) %>%
									select(-CM) %>%
       group_by(Item, Group, Cond, G, CS) %>%
       summarize(C = sum(C), NC = sum(NC)) %>%
       ungroup()

   cs_codes <- dp_subj2 %>%
       select(Subject, Group, Cond, CS) %>% distinct()

   mod_form <- cbind(C, NC) ~ G * CS

   cs_eff <- c("CS", "G:CS")

   orig_coef <- fit_mnom(dp_subj2, form = mod_form)

   pmx <- replicate(nperm_runs,
										sync_perm(dp_subj2, cs_codes, "CS", c("Subject", "Group")) %>%
												fit_mnom(mod_form))

   pmx2 <- cbind(orig_coef, pmx)[cs_eff, ]
   pvals_subj <- pmx2 %>%
       apply(1, perm_ps) / ncol(pmx2)

   pmx_item <- replicate(nperm_runs,
                         permute_wunit(dp_item2, "Item", "CS") %>%
                             fit_mnom(mod_form))

   pmx3 <- cbind(orig_coef, pmx_item)[cs_eff, ]
   pvals_item <- pmx3 %>% apply(1, perm_ps) / ncol(pmx3)

   ## now simple effects
   ## children
   mf_se <- cbind(C, NC) ~ CS

   children <- dp_subj2 %>%
       filter(Group == "child") %>% select(-Group, -G)
   orig_child_subj <- fit_mnom(children, mf_se)
   pmx_child_subj <- cbind(orig_child_subj,
                           replicate(nperm_runs,
                               permute_wunit(children, "Subject", "CS") %>%
                               fit_mnom(mf_se)))

   pvals_child_subj <- apply(pmx_child_subj["CS", , drop = FALSE],
                             1, perm_ps) / ncol(pmx_child_subj)

   adults <- dp_subj2 %>%
       filter(Group == "adult") %>% select(-Group, -G)
   orig_adult_subj <- fit_mnom(adults, mf_se)
   pmx_adult_subj <- cbind(orig_adult_subj,
                           replicate(nperm_runs,
                               permute_wunit(adults, "Subject", "CS") %>%
                               fit_mnom(mf_se)))

   pvals_adult_subj <- apply(pmx_adult_subj["CS", , drop = FALSE],
                             1, perm_ps) / ncol(pmx_adult_subj)

   children <- dp_item2 %>%
       filter(Group == "child") %>% select(-Group, -G)
   orig_child_item <- fit_mnom(children, mf_se)
   pmx_child_item <- cbind(orig_child_item,
                           replicate(nperm_runs,
                               permute_wunit(children, "Item", "CS") %>%
                               fit_mnom(mf_se)))

   pvals_child_item <- apply(pmx_child_item["CS", , drop = FALSE],
                             1, perm_ps) / ncol(pmx_child_item)

   adults <- dp_item2 %>%
       filter(Group == "adult") %>% select(-Group, -G)
   orig_adult_item <- fit_mnom(adults, mf_se)
   pmx_adult_item <- cbind(orig_adult_item,
                           replicate(nperm_runs,
                               permute_wunit(adults, "Item", "CS") %>%
                               fit_mnom(mf_se)))

   pvals_adult_item <- apply(pmx_adult_item["CS", , drop = FALSE],
                             1, perm_ps) / ncol(pmx_adult_item)


   results <- c(subj = pvals_subj, item = pvals_item,
								child_subj = pvals_child_subj,
								child_item = pvals_child_item,
								adult_subj = pvals_adult_subj,
								adult_item = pvals_adult_item)

   saveRDS(results, file = "derived/results/DP_consolidation_collapsed_results.rds")

   data_frame(Effect = names(results), pvalue = round(results, 3))
 #+END_SRC

 #+RESULTS:
 | Effect        | pvalue |
 |---------------+--------|
 | subj.CS       |  0.007 |
 | subj.G:CS     |  0.018 |
 | item.CS       |  0.008 |
 | item.G:CS     |  0.013 |
 | child_subj.CS |  0.003 |
 | child_item.CS |  0.001 |
 | adult_subj.CS |  0.606 |
 | adult_item.CS |  0.614 |

** Consolidation effect by subject

 #+BEGIN_SRC R
   library("dplyr")
   library("tidyr")

   tinfo <- readRDS("derived/trial_data.rds") %>%
       as_data_frame()

   edat <- readRDS("derived/eye_data_cumulative.rds") %>%
       as_data_frame() %>%
       filter(FID >= -12, FID <= 120) %>%
       mutate(ID = ifelse(is.na(ID), "X", as.character(ID)),
							isComp = (ID == "Comp")) %>%
       select(-Pad, -ID) %>%
       group_by(TrialID) %>%
       summarize(Y = sum(isComp), N = n(), p = Y/N) %>%
       ungroup()

   ceff <- tinfo %>%
       filter(CompType == "New", Cond != "Untrained") %>%
       select(TrialID, Group, Subject, Cond) %>%
       inner_join(edat, "TrialID") %>%
       group_by(Group, Subject, Cond) %>%
       summarize(Y = sum(Y), N = sum(N), p = mean(p)) %>%
       ungroup()

   ceff2 <- ceff %>%
       select(-Y, -N) %>%
       spread(Cond, p) %>%
       mutate(diff = Consolidated - Unconsolidated)

   write.csv(ceff2, file = "derived/consolidation_effect.csv", row.names = FALSE)
 #+END_SRC

* Print results
	
** Overall analysis

#+BEGIN_SRC R :exports results :results value :colnames yes
   library("plyr")
   library("dplyr")
   library("tidyr")

   ## Note: coding of predictor variables was as follows:
   ##
   ##      G (Group)      :      adult = .5,   child = -.5
   ##     CM (Competition): competitor = .5, control = -.5
   ##     CT (CompType)   :        new = .5, existing = -.5
   ##
   ## and logodds model (fit by multinom) was
   ##   cbind(C, NC) ~ G * CM * CT
   ##   so C was the baseline, s.t. negative means more looks
   ##   to competitor than control (counterintuitive but ok)

   <<clust_fns2>>

   ## orig <- "preDP_overall_CR_analysis_orig_by_subj.rds"
   ## pvals <- "preDP_overall_CR_analysis_orig_pvals_by_subj.rds"
   ## pmx_1 <- "preDP_overall_CR_analysis_group_by_subj.rds"
   ## pmx_2 <- "preDP_overall_CR_analysis_competition_by_subj.rds"

   DP_overall_clust_subj <-
       cluster_pvalues("derived/results/DP_overall_CR_analysis_orig_by_subj.rds",
                       "derived/results/DP_overall_CR_analysis_orig_pvals_by_subj.rds",
                       "derived/results/DP_overall_CR_analysis_group_by_subj.rds",
                       "derived/results/DP_overall_CR_analysis_competition_by_subj.rds") %>%
       mutate(Unit = "Subject",
							begin = as.integer(1000 * (as.integer(t0) / 60)),
							end = as.integer(1000 * (as.integer(t1) / 60))) %>%
       rename(p = pval, mpe = mpe, cms = cms) %>%
       select(-t0, -t1)

   DP_overall_clust_item <-
       cluster_pvalues("derived/results/DP_overall_CR_analysis_orig_by_item.rds",
                       "derived/results/DP_overall_CR_analysis_orig_pvals_by_item.rds",
                       "derived/results/DP_overall_CR_analysis_comptype_by_item.rds",
                       "derived/results/DP_overall_CR_analysis_competition_by_item.rds") %>%
       mutate(Unit = "Item",
							begin = as.integer(1000 * (as.integer(t0) / 60)),
							end = as.integer(1000 * (as.integer(t1) / 60))) %>%
       rename(p = pval, mpe = mpe, cms = cms) %>%
       select(-t0, -t1)

   bind_rows(DP_overall_clust_subj,
             DP_overall_clust_item) %>%
			arrange(Effect, begin, desc(Unit), p) %>%
			mutate(p = round(p, 3),
             mpe = round(mpe, 3), cms = round(cms, 3)) %>%
			select(Effect, Unit, p, begin, end, cms, mpe)
#+END_SRC

#+RESULTS:
 | Effect  | Unit    |     p | begin |  end |     cms |    mpe |
 |---------+---------+-------+-------+------+---------+--------|
 | CM      | Subject | 0.005 |  -100 |   50 | 163.547 | -0.392 |
 | CM      | Item    | 0.001 |  -100 | 1100 | 668.484 | -0.571 |
 | CM      | Subject | 0.001 |   350 | 1100 | 516.071 |  -0.65 |
 | CM      | Subject | 0.317 |  1300 | 1350 |  17.415 | -0.476 |
 | CT:CM   | Item    | 0.014 |   450 |  750 |  115.24 |  0.706 |
 | CT:CM   | Subject | 0.013 |   500 |  700 |  77.869 | -0.819 |
 | CT:CM   | Subject | 0.239 |  1300 | 1350 |  19.296 | -1.223 |
 | G       | Subject | 0.001 |     0 | 1100 | 451.883 |  0.591 |
 | G       | Subject | 0.108 |  1300 | 1350 |  35.004 |  0.881 |
 | G:CM    | Subject | 0.002 |  -250 |  200 | 126.016 | -0.427 |
 | G:CM    | Item    | 0.042 |  -150 |    0 |  41.775 | -0.493 |
 | G:CM    | Item    | 0.642 |   100 |  100 |   6.321 | -0.496 |
 | G:CT    | Item    | 0.093 |  -300 |    0 |  61.081 | -0.352 |
 | G:CT    | Subject | 0.071 |  -250 |  -50 |  40.457 |  0.382 |
 | G:CT    | Item    | 0.405 |   100 |  200 |  24.441 | -0.354 |
 | G:CT    | Subject | 0.243 |   150 |  200 |  15.538 |  0.386 |
 | G:CT:CM | Item    | 0.302 |   250 |  400 |  32.295 |  0.682 |
 | G:CT:CM | Item    | 0.438 |   500 |  600 |  22.348 |  0.875 |
 | G:CT:CM | Subject | 0.419 |   550 |  550 |   7.233 | -0.997 |

** Consolidation analysis

#+BEGIN_SRC R :colnames yes
   library("plyr")
   library("dplyr")
   library("tidyr")

   ## Note:
   ## This analysis compares consolidated to unconsolidated
   ## Note: coding of predictor variables was as follows:
   ##
   ##      G (Group)        :        adult = .5,          child = -.5
   ##     CS (Consolidation): consolidated = .5, unconsolidated = -.5

   <<clust_fns2>>

   ## preDP
   DP_clust_subj <-
       cluster_pvalues("derived/results/DP_consolidation_CR_analysis_orig_by_subj.rds",
                       "derived/results/DP_consolidation_CR_analysis_orig_pvals_by_subj.rds",
                       "derived/results/DP_consolidation_CR_analysis_by_subj.rds",
                       NULL,
                       efflist = c("CS", "G:CS")) %>%
       mutate(Unit = "Subj")

   ## postDP
   DP_clust_item <-
       cluster_pvalues("derived/results/DP_consolidation_CR_analysis_orig_by_item.rds",
                       "derived/results/DP_consolidation_CR_analysis_orig_pvals_by_item.rds",
                       "derived/results/DP_consolidation_CR_analysis_by_item.rds",
                       NULL,
                       efflist = c("CS", "G:CS")) %>%
       mutate(Unit = "Item")

   bind_rows(DP_clust_subj, DP_clust_item) %>%
       mutate(begin = round(1000 * (as.integer(t0) / 60)),
							end = round(1000 * (as.integer(t1) / 60)),
							p = round(pval, 3),
							mpe = round(mpe, 3),
							cms = round(cms, 3)) %>%
       select(Effect, Unit, p, begin, end, mpe, cms) %>%
       arrange(Effect, begin, desc(Unit), desc(p))
#+END_SRC

 #+RESULTS:
 | Effect | Unit |     p | begin |  end |    mpe |    cms |
 |--------+------+-------+-------+------+--------+--------|
 | CS     | Subj | 0.313 |  -500 | -450 | -0.238 |  17.47 |
 | CS     | Item |  0.34 |  -500 | -450 | -0.238 | 13.209 |
 | CS     | Subj | 0.548 |  -200 | -200 | -0.203 |  6.335 |
 | CS     | Item | 0.522 |  -200 | -200 | -0.203 |  6.069 |
 | CS     | Subj | 0.512 |  -100 | -100 | -0.208 |  6.616 |
 | CS     | Item | 0.366 |  -100 |  -50 | -0.199 | 12.575 |
 | CS     | Subj | 0.341 |   950 | 1000 |  -0.37 | 15.152 |
 | CS     | Item | 0.179 |   950 | 1100 | -0.341 | 27.799 |
 | G:CS   | Item | 0.037 |   200 |  500 |  0.487 |  59.08 |
 | G:CS   | Subj | 0.341 |   250 |  300 |  0.519 | 14.092 |
 | G:CS   | Subj | 0.429 |   500 |  500 |  0.538 |  7.653 |
 | G:CS   | Subj | 0.479 |   850 |  850 |  0.685 |  6.758 |
 | G:CS   | Item | 0.424 |   850 |  850 |  0.685 |  8.178 |

* Plotting

#+NAME: plot_base
#+BEGIN_SRC R 
  <<libs>>
  library("ggplot2")

  <<agg_fns>>
  <<clust_fns2>>
  <<get_dp_aligned>>

  orig <- dp_subj %>% agg_up2(TRUE) %>%
      mutate(CompType = factor(CompType), Cond = factor(Cond),
             ms = round(1000 * (FID / 60)))

  boot_mx <-
      replicate(1000, dp_subj %>% boot_by_unit("Subject") %>% agg_up2())

  boot_ci <- apply(boot_mx, 1, quantile, probs = c(.025, .975))

  orig[["LL"]] <- boot_ci["2.5%", ]
  orig[["UL"]] <- boot_ci["97.5%", ]

  orig2 <- orig %>%
      inner_join(cond_lookup, "Cond") %>%
      inner_join(group_lookup, "Group") %>%
      mutate(Group = paste0(toupper(substr(Group, 1, 1)),
                 substr(Group, 2,
                        sapply(as.character(orig[["Group"]]), nchar))),
             CompType = factor(paste(CompType, "Competitor", sep = " ")))

#+END_SRC

** Main plot

#+HEADER: :file derived/results/graphics/dp_aligned.pdf :width 10 :height 7
#+BEGIN_SRC R :exports results :results output graphics :tangle dp_aligned_plot.R
  <<plot_base>>

  main_plot <- ggplot(orig2,
         aes(ms, p)) +
             geom_line(aes(color = Condition)) +
             geom_point(aes(shape = Condition, color = Condition)) +
             geom_ribbon(aes(ymin = LL, ymax = UL, fill = Condition),
                         alpha = .2, color = NA) +
             facet_wrap(Group2 ~ CompType) +
             coord_cartesian(xlim = c(-550, 1550)) +
             xlab("Time from Disambiguation Point (ms)") +
             ylab("Proportion of Looks") +
             theme(axis.text.x = element_text(angle = 90, size = 8, hjust = 1,
                                              vjust = .5))

  main_plot
#+END_SRC

** Plot sub-effects

*** Group by Competition

#+HEADER: :file derived/results/graphics/dp_aligned_group_by_comp.pdf :width 10 :height 5
#+BEGIN_SRC R :exports results :results output graphics :tangle dp_aligned_plot.R
   <<libs>>
   library("ggplot2")

   <<agg_fns>>
   <<clust_fns2>>
   <<get_dp_aligned>>

   cmatch <- data_frame(Cond = c("CompAbsent", "CompPresent",
														"Consolidated", "Unconsolidated", "Untrained"),
												Competition = c("Untrained/Control", "Competitor",
														"Competitor", "Competitor", "Untrained/Control"))

   agg_up3 <- function(x, full = FALSE) {
       ff <- group_by(x, Group, Competition, FID) %>%
           summarize(C = sum(C), N = sum(NC)) %>%
           ungroup() %>%
           mutate(p = C / (C + N))
       if (full) ff else {ff %>% `[[`("p")}
   }

   dp_subj2 <- inner_join(dp_subj, cmatch, "Cond")

   orig <- dp_subj2 %>%
       agg_up3(TRUE) %>%
       mutate(ms = round(1000 * (FID / 60)))

   boot_mx <-
       replicate(1000, dp_subj2 %>% boot_by_unit("Subject") %>% agg_up3())

   boot_ci <- apply(boot_mx, 1, quantile, probs = c(.025, .975))

   orig[["LL"]] <- boot_ci["2.5%", ]
   orig[["UL"]] <- boot_ci["97.5%", ]

   orig2 <- orig %>%
       inner_join(group_lookup, "Group") %>%
       mutate(Group = paste0(toupper(substr(Group, 1, 1)),
									substr(Group, 2,
                         sapply(as.character(orig[["Group"]]), nchar))))

   gxc_ann <- data_frame(x = 0L, xmin = -250, xmax = 250, y = .25)

   g_by_c <- ggplot(orig2,
										aes(ms, p)) +
							geom_line(aes(color = Group, shape = Competition)) +
							geom_point(aes(shape = Competition, color = Group), size = 2) +
							geom_ribbon(aes(ymin = LL, ymax = UL, fill = Group, shape = Competition),
													alpha = .2, color = NA) +
							geom_text(x = 0, y = .26, label = "Group x Competition", size = 3.5) +
							geom_errorbarh(aes(x = x, y = y, xmin = xmin, xmax = xmax), gxc_ann,
                             height = .005) +
							coord_cartesian(xlim = c(-550, 1550)) +
							xlab("Time from Disambiguation Point (ms)") +
							ylab("Proportion of Looks") +
							theme(axis.text.x = element_text(angle = 90, size = 8, hjust = 1,
                                               vjust = .5))

   g_by_c
#+END_SRC

*** Type by Competitor

#+HEADER: :file derived/results/graphics/dp_aligned_type_by_comp.pdf :width 10 :height 5
#+BEGIN_SRC R :exports results :results output graphics :tangle dp_aligned_plot.R
   <<libs>>
   library("ggplot2")

   <<agg_fns>>
   <<clust_fns2>>
   <<get_dp_aligned>>

   cond_matchup <- data_frame(Cond = c("CompAbsent", "CompPresent",
																	"Consolidated", "Unconsolidated", "Untrained"),
															Competitor = c("Untrained/Control", "Competitor",
																	"Competitor", "Competitor", "Untrained/Control"))

   agg_up4 <- function(x, full = FALSE) {
       ff <- x %>%
           inner_join(cond_matchup, "Cond") %>%
           group_by(CompType, Competitor, FID) %>%
           summarize(C = sum(C), N = sum(NC)) %>%
           ungroup() %>%
           mutate(p = C / (C + N)) %>%
           rename(Type = CompType, Competition = Competitor)
       if (full) ff else {ff %>% `[[`("p")}
   }

   orig <- dp_subj %>% agg_up4(TRUE) %>%
       mutate(ms = round(1000 * (FID / 60)))

   boot_mx <-
       replicate(1000, dp_subj %>% boot_by_unit("Subject") %>% agg_up4())

   boot_ci <- apply(boot_mx, 1, quantile, probs = c(.025, .975))

   orig[["LL"]] <- boot_ci["2.5%", ]
   orig[["UL"]] <- boot_ci["97.5%", ]

   # txc_ann <- data_frame(x = 0L, xmin = -250, xmax = 250, y = .25)
   txc_ann <- data_frame(x = 600L, xmin = 500L, xmax = 700L, y = .17)

   t_by_c <- ggplot(orig,
					aes(ms, p)) +
							geom_line(aes(color = Type, shape = Competition)) +
							geom_point(aes(shape = Competition, color = Type), size = 2) +
							geom_ribbon(aes(ymin = LL, ymax = UL, fill = Type,
															shape = Competition),
													alpha = .2, color = NA) +
							geom_text(x = 600, y = .18, label = "Type x Competition", size = 3.5) +
							geom_errorbarh(aes(x = x, y = y, xmin = xmin, xmax = xmax), txc_ann,
                             height = .005) +
							coord_cartesian(xlim = c(-550, 1550)) +
							xlab("Time from Disambiguation Point (ms)") +
							ylab("Proportion of Looks") +
							theme(axis.text.x = element_text(angle = 90, size = 8, hjust = 1,
                                               vjust = .5))

   t_by_c
#+END_SRC
